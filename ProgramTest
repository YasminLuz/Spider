using Newtonsoft.Json;
using System;
using System.Net;
using Newtonsoft.Json.Converters;
using System.IO;
using static Main.Orderbook;

namespace Main
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var link = getLink(0, 0);

            var html = GetSiteBitcoin(link);

            PrintResult(html);
            Ticker t = new Ticker();
            Serializer(t);
            //Deserializer(t);
            //SerializerOrder();
            DeserializerOrder();
        }

        #region Priv Methods
        private static string getLink(int c, int d)
        {
            var currency = new string[] { "/BTC", "/LTC", "/BCH", "/XRP ", "/ETH" };
            var domain = new string[] { "/ticker", "/orderbook", "/trades" };

            return "https://www.mercadobitcoin.net/api" + currency[c] + domain[d] + "/";
        }

        private static string GetSiteBitcoin(string url)
        {
            var web = new WebClient();

            return web.DownloadString(url);
        }

        private static void PrintResult(string url)
        {
            Console.WriteLine(url);

            Console.ReadKey();
        }

        private static void Deserializer(Ticker ticker)
        {
            string json = "";

            json = @"{
                              'ticker': {
                                          'buy': 23680.00003000,
                                          'sell': 23757.39000000, 
                                          'high': 24000.00000000,
                                          'low':  22650.00000000,
                                          'vol': 502.00988747,
                                          'last': 23757.39000000,
                                          'date': 1557241541
                                        }
                             }";
            ticker = new Ticker();
            ticker = JsonConvert.DeserializeObject<Ticker>(json);

            Console.WriteLine("{ticker: {buy: " + ticker.ticker.buy + ", sell: " + ticker.ticker.sell + ", high: " + ticker.ticker.high + ", low: " + ticker.ticker.low + ", vol: "
              + ticker.ticker.vol + ", last: " + ticker.ticker.last + ", date: " + ticker.ticker.date + "}}");
            Console.ReadKey();
        }

        private static void DeserializerOrder()
        {
            string json = GetSiteBitcoin(getLink(0, 1));
   
            var nodeValues = JsonConvert.DeserializeObject<JsonConverted>(json);

            Console.ReadKey();
        }

        private static void Serializer(Object obj)
        {
            obj = new SubTicker
            {
                buy = 23680.00003000m,
                sell = 23757.39000000m,
                high = 24000.00000000m,
                low = 22650.00000000m,
                vol = 502.00988747m,
                last = 23757.39000000m,
                date = 1557241541,

            };

            string json = JsonConvert.SerializeObject(obj, Formatting.Indented);

            Console.WriteLine("ticker:{" + json + "}");
            Console.ReadKey();
        }


        private static void SerializerOrder()
        {
            Orderbook order = new Orderbook();

            JsonSerializer serializer = new JsonSerializer();
            serializer.Converters.Add(new JavaScriptDateTimeConverter());
            serializer.NullValueHandling = NullValueHandling.Ignore;

            using (StreamWriter sw = new StreamWriter(@"E:\Projetos\WebDownload\ConsoleApp1\OrderbookJson.json"))
            using (JsonWriter writer = new JsonTextWriter(sw))
            {
                serializer.Serialize(writer, order);
            }
            Console.WriteLine("serializer:{" + order + "}"); Console.ReadKey();
        }

        #endregion


    }
    //https://social.msdn.microsoft.com/Forums/en-US/39402148-818d-4ee9-acc2-1d833a4635ba/jsonnet-deserialize-an-array-of-arrays?forum=csharpgeneral
    //https://www.newtonsoft.com/json/help/html/SerializingJSON.htm
    //https://www.google.com/search?newwindow=1&rlz=1C1SQJL_pt-BRBR835BR835&ei=e87VXO_1Gbi75OUPhsaWuAo&q=json+deserialize+complex+object+c%23&oq=deserialize+json+objeto+com&gs_l=psy-ab.1.0.0i22i30l3.814184.821956..824156...4.0..0.198.1594.0j10......0....1..gws-wiz.......0i71j0j0i203j0i13j0i13i30j0i8i13i30j33i22i29i30.RRS9orW4lNU
    //https://www.guj.com.br/t/como-transformar-um-array-de-objetos-do-json-em-uma-list-de-objetos-em-c-usando-json-net/358847
}
