using Newtonsoft.Json;
using System;
using System.Net;
using static Main.Orderbook;
using System.Collections.Generic;
using static Main.Trades;

namespace Main
{
    public class Program
    {
        enum OptDomains { TICKER = 1, ORDERBOOK = 2, TRADES = 3};

        public static void Main(string[] args)
        {
            var link = getLink(0, OptDomains.ORDERBOOK);

            var html = GetSiteBitcoin(link);

            //PrintResult(html);
            //Serializer(t);
            //Deserializer(t);
            SerializerOrder();
            //DeserializerOrder();
            //DeserializerTrades();
            //SerializerTrades();
        }

        #region Priv Methods
        private static string getLink(int c, int d)
        {
            var currency = new string[] { "/BTC", "/LTC", "/BCH", "/XRP ", "/ETH" };
            var domain = new string[] { "/ticker", "/orderbook", "/trades" };

            return "https://www.mercadobitcoin.net/api" + currency[c] + domain[d] + "/";
        }

        private static string GetSiteBitcoin(string url)
        {
            var web = new WebClient();

            return web.DownloadString(url);
        }

        private static void PrintResult(string url)
        {
            Console.WriteLine(url);

            Console.ReadKey();
        }

        private static void Deserializer(Ticker ticker)
        {
            string json = "";

            json = @"{
                              'ticker': {
                                          'buy': 23680.00003000,
                                          'sell': 23757.39000000, 
                                          'high': 24000.00000000,
                                          'low':  22650.00000000,
                                          'vol': 502.00988747,
                                          'last': 23757.39000000,
                                          'date': 1557241541
                                        }
                             }";
            ticker = new Ticker();
            ticker = JsonConvert.DeserializeObject<Ticker>(json);

            Console.WriteLine("{ticker: {buy: " + ticker.ticker.buy + ", sell: " + ticker.ticker.sell + ", high: " + ticker.ticker.high + ", low: " + ticker.ticker.low + ", vol: "
              + ticker.ticker.vol + ", last: " + ticker.ticker.last + ", date: " + ticker.ticker.date + "}}");
            Console.ReadKey();
        }

        private static JsonConverted DeserializerOrder()
        {
            string json = GetSiteBitcoin(getLink(0, 1));
   
            var nodeValues = JsonConvert.DeserializeObject<JsonConverted>(json);

            return nodeValues;
        }

        private static List<SubTrades> DeserializerTrades()
        {
            string json = GetSiteBitcoin(getLink(0, 2));

            var nodeValues = JsonConvert.DeserializeObject<List<SubTrades>>(json);

            Console.WriteLine(nodeValues[0]);

            Console.ReadKey();

            return nodeValues;
        }

        private static void Serializer()
        {
            SubTicker obj = new SubTicker
            {
                buy = 23680.00003000m,
                sell = 23757.39000000m,
                high = 24000.00000000m,
                low = 22650.00000000m,
                vol = 502.00988747m,
                last = 23757.39000000m,
                date = 1557241541
            };

            string json = JsonConvert.SerializeObject(obj, Formatting.Indented);

            Console.WriteLine("ticker:{" + json + "}");
            Console.ReadKey();
        }

        private static void SerializerOrder()
        {
            JsonConverted list = DeserializerOrder();

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(list);

            Console.WriteLine("order:{" + json + "}");
        }

        private static void SerializerTrades()
        {
            List<SubTrades> tradesList = DeserializerTrades();

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(tradesList);
       
            Console.WriteLine("trades:{" + json + "}");
        }
        #endregion


    }
