using Newtonsoft.Json;
using System;
using System.Net;
using System.Collections.Generic;
using static Main.Orderbook;
using static Main.Trades;

namespace Main
{
    public class Program
    {
        public static void Main(string[] args)
        {
            for(int option = 0; option < 3; option++)
            {
                var link = getLink(0, option);

                var html = GetSiteBitcoin(link);
                if (option == 0)
                {
                    var desTicker = DeserializerTicker();
                    SerializerTicker(desTicker);

                } else if(option == 1)
                {
                    var desOrderbook = DeserializerOrderbook();
                    SerializerOrderbook(desOrderbook);
                }
                else
                {
                    var desTrades = DeserializerTrades();
                    SerializerTrades(desTrades);
                }
              
            }          
        }

        #region Priv Methods
        private static string getLink(int c, int d)
        {
            var currency = new string[] { "/BTC", "/LTC", "/BCH", "/XRP ", "/ETH" };
            var domain = new string[] { "/ticker", "/orderbook", "/trades" };

            return "https://www.mercadobitcoin.net/api" + currency[c] + domain[d] + "/";
        }

        private static string GetSiteBitcoin(string url)
        {
            var web = new WebClient();

            return web.DownloadString(url);
        }

        private static void PrintResult(string url)
        {
            Console.WriteLine(url);

            Console.ReadKey();
        }

        private static Ticker DeserializerTicker()
        {
            string json = GetSiteBitcoin(getLink(0, 0));

            var ticker = JsonConvert.DeserializeObject<Ticker>(json);

            return ticker;
        }

        private static JsonConverted DeserializerOrderbook()
        {
            string json = GetSiteBitcoin(getLink(0, 1));
   
            var nodeValues = JsonConvert.DeserializeObject<JsonConverted>(json);

            return nodeValues;
        }

        private static List<SubTrades> DeserializerTrades()
        {
            string json = GetSiteBitcoin(getLink(0, 2));

            var nodeValues = JsonConvert.DeserializeObject<List<SubTrades>>(json);

            return nodeValues;
        }

        private static string SerializerTicker(Ticker desTicker)
        {
            string json = JsonConvert.SerializeObject(desTicker, Formatting.Indented);
            
            return json + "\n";
        }

        private static string SerializerOrderbook(JsonConverted desOrderbook)
        {
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(desOrderbook);

            return json + "\n";
        }

        private static string SerializerTrades(List<SubTrades> desTrades)
        {
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(desTrades);

            return json + "\n";
        }

        #endregion
    }
}
